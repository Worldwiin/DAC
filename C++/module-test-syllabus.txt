Cpp module test syllabus 

1. OOPs Concepts in C++
a. Heap and Stack Based Objects
  * Understanding memory allocation for objects on the stack vs. the heap.
b. Constructors
  * Default Constructor
  * Parameterized Constructor
c. Copy Constructor
  * Role and usage in object copying.
d. Destructor
  * Implicit calling
  * Explicit calling in case of heap-based objects.
e. Array of Objects
  * Creating and managing arrays of objects.
f. Dynamic Memory Allocation (DMA)
  * Allocating and deallocating arrays of objects.
  * Using the delete keyword in case of DMA.

2. Friend Functions
a. Forward Declaration
  * Usage and syntax.
b. Syntax for Defining Member Functions Outside the Class
  * Proper structure and examples.

3. Operator Overloading
a. Assignment Operator
  * Overloading the = operator.
b. Increment/Decrement Operators
  * Pre-increment (++obj) and Post-increment (obj++)
  * Pre-decrement (--obj) and Post-decrement (obj--)
c. Arithmetic Operators
  * Overloading all arithmetic operators (+, -, *, /, %).
d. Comparison Operators
  * Overloading >, <, ==.
e. Compound Assignment Operators
  * Overloading operators like +=, -=, *=, /=, %=.
f. Primitive on the Left Side During Operator Overloading
  * Need for friend function inside operator overloading.
g. Insertion Operator Overloading
  * Overloading the << operator for output streams.

4. Type Conversion
a. Primitive to User-Defined Type
  * Conversion constructor or function.
b. User-Defined Type to Primitive
  * Conversion operator function.

5. Virtual Functions and Polymorphism
a. Virtual Functions
    * Usage and implementation.
b. Pure Virtual Functions
  * Definition and purpose.
c. Abstract Classes
  * Creating and using abstract classes.

6. Upcasting and Downcasting
a. Upcasting with Pointer and Reference
  * Handling parent class pointers/references storing child class objects.
b. Parent Class Array Storing Child Class Objects
  * Managing arrays with polymorphic behavior.
c. Polymorphic Function Calls
  * Functions accepting parent class pointers/references and invoking virtual/pure virtual functions.
d. Downcasting (dynamic_cast)
  * Using dynamic_cast for downcasting.
  * Handling bad_cast exception with references.

7. Templates
a. Class Templates
  * Definition and use cases.
b. Function Templates
  * Creating and using function templates.
c. Normal Class with Function Template as a Member Function
  * Incorporating function templates in regular classes.
d. Function Template Accepting Any Pointer
  * Generalized function templates for pointers.
e. Operator Overloading in Templates
  * Implementing operator overloading in template classes.
